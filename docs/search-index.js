var searchIndex = {};
searchIndex["tokio_http2"] = {"doc":"HTTP/1.1:\nThis library provides an HTTP library built on Futures and the Tokio Project for Async I/O.\nThis version supports Pipelining for HTTP/1.1.","items":[[3,"Url","tokio_http2","A parsed URL record.",null,null],[3,"Request","","",null,null],[12,"logger","","Optional Logger associated with a given request",0,null],[12,"base_path","","Base path is used to hold the actual base directory location on the server of the request.",0,null],[3,"Response","","",null,null],[12,"headers","","",1,null],[12,"body","","",1,null],[12,"status_message","","",1,null],[12,"code","","",1,null],[12,"message","","",1,null],[0,"http2","","This library module provides HTTP/2 parsing and buffer frames used for HTTP/2.",null,null],[3,"ParserSettings","tokio_http2::http2","",null,null],[3,"StreamIdentifier","","",null,null],[12,"0","","",2,null],[3,"ErrorCode","","",null,null],[12,"0","","",3,null],[3,"SizeIncrement","","",null,null],[12,"0","","",4,null],[4,"Error","","Errors that can occur during parsing an HTTP/2 frame.",null,null],[13,"Short","","A full frame header was not passed.",5,null],[13,"BadFlag","","An unsupported value was set for the flag value.",5,null],[13,"BadKind","","An unsupported value was set for the frame kind.",5,null],[13,"TooMuchPadding","","The padding length was larger than the frame-header-specified\nlength of the payload.",5,null],[13,"PayloadLengthTooShort","","The payload length specified by the frame header was shorter than\nnecessary for the parser settings specified and the frame type.",5,null],[13,"PartialSettingLength","","The payload length specified by the frame header of a settings frame\nwas not a round multiple of the size of a single setting.",5,null],[13,"InvalidPayloadLength","","The payload length specified by the frame header was not the\nvalue necessary for the specific frame type.",5,null],[4,"HttpError","","",null,null],[13,"Protocol","","",6,null],[13,"Internal","","",6,null],[13,"FlowControlError","","",6,null],[13,"SettingsTimeout","","",6,null],[5,"encode_u24","","",null,null],[5,"encode_u32","","",null,null],[5,"encode_u64","","",null,null],[0,"kind","","NB: This code is changing so please do not depend on it at this time!",null,null],[4,"Kind","tokio_http2::http2::kind","",null,null],[13,"Data","","",7,null],[13,"Headers","","",7,null],[13,"Priority","","",7,null],[13,"Reset","","",7,null],[13,"Settings","","",7,null],[13,"PushPromise","","",7,null],[13,"Ping","","",7,null],[13,"GoAway","","",7,null],[13,"WindowUpdate","","",7,null],[13,"Continuation","","",7,null],[13,"Unregistered","","",7,null],[11,"clone","","",7,null],[11,"fmt","","",7,null],[11,"eq","","",7,null],[11,"hash","","",7,null],[11,"new","","",7,{"inputs":[{"name":"u8"}],"output":{"name":"kind"}}],[11,"encode","","",7,null],[0,"flag","tokio_http2::http2","NB: This code is changing so please do not depend on it at this time!",null,null],[3,"Flag","tokio_http2::http2::flag","",null,null],[17,"END_STREAM","","",null,null],[17,"ACK","","",null,null],[17,"END_HEADERS","","",null,null],[17,"PADDED","","",null,null],[17,"PRIORITY","","",null,null],[11,"eq","","",8,null],[11,"ne","","",8,null],[11,"clone","","",8,null],[11,"partial_cmp","","",8,null],[11,"lt","","",8,null],[11,"le","","",8,null],[11,"gt","","",8,null],[11,"ge","","",8,null],[11,"cmp","","",8,null],[11,"hash","","",8,null],[11,"fmt","","",8,null],[11,"empty","","Returns an empty set of flags.",8,{"inputs":[],"output":{"name":"flag"}}],[11,"all","","Returns the set containing all flags.",8,{"inputs":[],"output":{"name":"flag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",8,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",8,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",8,{"inputs":[{"name":"u8"}],"output":{"name":"flag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",8,null],[11,"is_all","","Returns `true` if all flags are currently set.",8,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",8,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",8,null],[11,"insert","","Inserts the specified flags in-place.",8,null],[11,"remove","","Removes the specified flags in-place.",8,null],[11,"toggle","","Toggles the specified flags in-place.",8,null],[11,"bitor","","Returns the union of the two sets of flags.",8,null],[11,"bitor_assign","","Adds the set of flags.",8,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",8,null],[11,"bitxor_assign","","Toggles the set of flags.",8,null],[11,"bitand","","Returns the intersection between the two sets of flags.",8,null],[11,"bitand_assign","","Disables all flags disabled in the set.",8,null],[11,"sub","","Returns the set difference of the two sets of flags.",8,null],[11,"sub_assign","","Disables all flags enabled in the set.",8,null],[11,"not","","Returns the complement of this set of flags.",8,null],[11,"extend","","",8,null],[11,"from_iter","","",8,{"inputs":[{"name":"t"}],"output":{"name":"flag"}}],[11,"new","","",8,{"inputs":[{"name":"u8"}],"output":{"name":"result"}}],[11,"ack","","",8,{"inputs":[],"output":{"name":"flag"}}],[11,"end_stream","","",8,{"inputs":[],"output":{"name":"flag"}}],[11,"end_headers","","",8,{"inputs":[],"output":{"name":"flag"}}],[11,"padded","","",8,{"inputs":[],"output":{"name":"flag"}}],[11,"priority","","",8,{"inputs":[],"output":{"name":"flag"}}],[0,"payload","tokio_http2::http2","NB: This code is changing so please do not depend on it at this time!",null,null],[3,"Priority","tokio_http2::http2::payload","",null,null],[3,"Setting","","",null,null],[4,"Payload","","",null,null],[13,"Data","","",9,null],[12,"data","tokio_http2::http2::payload::Payload","",9,null],[13,"Headers","tokio_http2::http2::payload","",9,null],[12,"priority","tokio_http2::http2::payload::Payload","",9,null],[12,"block","","",9,null],[13,"Priority","tokio_http2::http2::payload","",9,null],[13,"Reset","","",9,null],[13,"Settings","","",9,null],[13,"PushPromise","","",9,null],[12,"promised","tokio_http2::http2::payload::Payload","",9,null],[12,"block","","",9,null],[13,"Ping","tokio_http2::http2::payload","",9,null],[13,"GoAway","","",9,null],[12,"last","tokio_http2::http2::payload::Payload","",9,null],[12,"error","","",9,null],[12,"data","","",9,null],[13,"WindowUpdate","tokio_http2::http2::payload","",9,null],[13,"Continuation","","",9,null],[13,"Unregistered","","",9,null],[4,"SettingIdentifier","","",null,null],[13,"HeaderTableSize","","",10,null],[13,"EnablePush","","",10,null],[13,"MaxConcurrentStreams","","",10,null],[13,"InitialWindowSize","","",10,null],[13,"MaxFrameSize","","",10,null],[11,"clone","","",9,null],[11,"fmt","","",9,null],[11,"eq","","",9,null],[11,"ne","","",9,null],[11,"hash","","",9,null],[11,"kind","","",9,null],[11,"parse","","",9,null],[11,"encode","","",9,null],[11,"encoded_len","","How many bytes this Payload would be encoded.",9,null],[11,"padded","","",9,null],[11,"priority","","",9,null],[11,"clone","","",11,null],[11,"fmt","","",11,null],[11,"eq","","",11,null],[11,"ne","","",11,null],[11,"hash","","",11,null],[11,"parse","","",11,null],[11,"encode","","",11,null],[11,"clone","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"hash","","",12,null],[11,"fmt","","",12,null],[11,"new","","",12,{"inputs":[{"name":"settingidentifier"},{"name":"u32"}],"output":{"name":"setting"}}],[11,"identifier","","",12,null],[11,"value","","",12,null],[11,"clone","","",10,null],[11,"fmt","","",10,null],[11,"eq","","",10,null],[11,"hash","","",10,null],[0,"frame","tokio_http2::http2","NB: This code is changing so please do not depend on it at this time!",null,null],[3,"Frame","tokio_http2::http2::frame","",null,null],[12,"header","","",13,null],[12,"payload","","",13,null],[3,"FrameHeader","","",null,null],[12,"length","","",14,null],[12,"kind","","",14,null],[12,"flag","","",14,null],[12,"id","","",14,null],[11,"clone","","",13,null],[11,"fmt","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"hash","","",13,null],[11,"parse","","",13,null],[11,"encode","","Encodes this Frame into a buffer.",13,null],[11,"encoded_len","","How many bytes this Frame will use in a buffer when encoding.",13,null],[11,"clone","","",14,null],[11,"fmt","","",14,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"hash","","",14,null],[11,"parse","","",14,null],[11,"encode","","",14,null],[17,"FRAME_HEADER_BYTES","tokio_http2::http2","",null,null],[11,"clone","","",5,null],[11,"fmt","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"hash","","",5,null],[11,"clone","","",15,null],[11,"fmt","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"hash","","",15,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"hash","","",2,null],[11,"parse","","",2,null],[11,"encode","","",2,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"hash","","",3,null],[11,"parse","","",3,null],[11,"encode","","",3,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"hash","","",4,null],[11,"parse","","",4,null],[11,"encode","","",4,null],[0,"hpack","tokio_http2","This library module provides the required HPACK compression used for HTTP/2 headers.\nA module implementing HPACK functionality. Exposes a simple API for\nperforming the encoding and decoding of header sets, according to the\nHPACK spec.",null,null],[0,"encoder","tokio_http2::hpack","Implements all functionality related to encoding header blocks using\nHPACK.",null,null],[3,"Encoder","tokio_http2::hpack::encoder","Represents an HPACK encoder. Allows clients to encode arbitrary header sets\nand tracks the encoding context. That is, encoding subsequent header sets\nwill use the context built by previous encode calls.",null,null],[5,"encode_integer_into","","Encode an integer to the representation defined by HPACK, writing it into the provider\n`io::Write` instance. Also allows the caller to specify the leading bits of the first\noctet. Any bits that are already set within the last `prefix_size` bits will be cleared\nand overwritten by the integer&#39;s representation (in other words, only the first\n`8 - prefix_size` bits from the `leading_bits` octet are reflected in the first octet\nemitted by the function.",null,{"inputs":[{"name":"usize"},{"name":"u8"},{"name":"u8"},{"name":"w"}],"output":{"name":"result"}}],[5,"encode_integer","","Encode an integer to the representation defined by HPACK.",null,{"inputs":[{"name":"usize"},{"name":"u8"}],"output":{"name":"vec"}}],[11,"new","","Creates a new `Encoder` with a default static table, as defined by the\nHPACK spec (Appendix A).",16,{"inputs":[],"output":{"name":"encoder"}}],[11,"encode","","Encodes the given headers using the HPACK rules and returns a newly\nallocated `Vec` containing the bytes representing the encoded header\nset.",16,null],[11,"encode_into","","Encodes the given headers into the given `io::Write` instance. If the io::Write raises an\nError at any point, this error is propagated out. Any changes to the internal state of the\nencoder will not be rolled back, though, so care should be taken to ensure that the paired\ndecoder also ends up seeing the same state updates or that their pairing is cancelled.",16,null],[11,"encode_header_into","","Encodes a single given header into the given `io::Write` instance.",16,null],[0,"decoder","tokio_http2::hpack","Exposes the struct `Decoder` that allows for HPACK-encoded header blocks to\nbe decoded into a header list.",null,null],[3,"Decoder","tokio_http2::hpack::decoder","Decodes headers encoded using HPACK.",null,null],[4,"IntegerDecodingError","","Represents all errors that can be encountered while decoding an\ninteger.",null,null],[13,"TooManyOctets","","5.1. specifies that &quot;excessively large integer decodings&quot; MUST be\nconsidered an error (whether the size is the number of octets or\nvalue). This variant corresponds to the encoding containing too many\noctets.",17,null],[13,"ValueTooLarge","","The variant corresponds to the case where the value of the integer\nbeing decoded exceeds a certain threshold.",17,null],[13,"NotEnoughOctets","","When a buffer from which an integer was supposed to be encoded does\nnot contain enough octets to complete the decoding.",17,null],[13,"InvalidPrefix","","Only valid prefixes are [1, 8]",17,null],[4,"StringDecodingError","","Represents all errors that can be encountered while decoding an octet\nstring.",null,null],[13,"NotEnoughOctets","","",18,null],[13,"HuffmanDecoderError","","",18,null],[4,"DecoderError","","Represents all errors that can be encountered while performing the decoding\nof an HPACK header set.",null,null],[13,"HeaderIndexOutOfBounds","","",19,null],[13,"IntegerDecodingError","","",19,null],[13,"StringDecodingError","","",19,null],[13,"InvalidMaxDynamicSize","","The size of the dynamic table can never be allowed to exceed the max\nsize mandated to the decoder by the protocol. (by perfroming changes\nmade by SizeUpdate blocks).",19,null],[6,"DecoderResult","","The result returned by the `decode` method of the `Decoder`.",null,null],[11,"eq","","",17,null],[11,"clone","","",17,null],[11,"fmt","","",17,null],[11,"eq","","",18,null],[11,"ne","","",18,null],[11,"clone","","",18,null],[11,"fmt","","",18,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"clone","","",19,null],[11,"fmt","","",19,null],[11,"new","","Creates a new `Decoder` with all settings set to default values.",20,{"inputs":[],"output":{"name":"decoder"}}],[11,"set_max_table_size","","Sets a new maximum dynamic table size for the decoder.",20,null],[11,"decode_with_cb","","Decodes the headers found in the given buffer `buf`. Invokes the callback `cb` for each\ndecoded header in turn, by providing it the header name and value as `Cow` byte array\nslices.",20,null],[11,"decode","","Decode the header block found in the given buffer.",20,null],[0,"huffman","tokio_http2::hpack","A module exposing utilities for encoding and decoding Huffman-coded octet\nstrings, under the Huffman code defined by HPACK.\n(HPACK-draft-10, Appendix B)",null,null],[3,"HuffmanDecoder","tokio_http2::hpack::huffman","A simple implementation of a Huffman code decoder.",null,null],[4,"HuffmanDecoderError","","Represents the error variants that the `HuffmanDecoder` can return.",null,null],[13,"PaddingTooLarge","","Any padding strictly larger than 7 bits MUST be interpreted as an error",21,null],[13,"InvalidPadding","","Any padding that does not correspond to the most significant bits of\nEOS MUST be interpreted as an error.",21,null],[13,"EOSInString","","If EOS is ever found in the string, it causes an error.",21,null],[6,"HuffmanDecoderResult","","The type that represents the result of the `decode` method of the\n`HuffmanDecoder`.",null,null],[11,"eq","","",21,null],[11,"clone","","",21,null],[11,"fmt","","",21,null],[11,"new","","Constructs a new HuffmanDecoder with the default Huffman code table, as\ndefined in the HPACK-draft-10, Appendix B.",22,{"inputs":[],"output":{"name":"huffmandecoder"}}],[11,"decode","","Decodes the buffer `buf` into a newly allocated `Vec`.",22,null],[0,"http","tokio_http2","",null,null],[3,"Request","tokio_http2::http","",null,null],[12,"logger","","Optional Logger associated with a given request",0,null],[12,"base_path","","Base path is used to hold the actual base directory location on the server of the request.",0,null],[3,"Response","","",null,null],[12,"headers","","",1,null],[12,"body","","",1,null],[12,"status_message","","",1,null],[12,"code","","",1,null],[12,"message","","",1,null],[3,"HttpProto","","Proto and Codec can have STATE so you can add features to these two and then pass them to\nTcpServer.",null,null],[12,"logger","","",23,null],[12,"router","","",23,null],[12,"base_path","","",23,null],[3,"HttpCodec","","",null,null],[11,"clone","tokio_http2","",0,null],[11,"read","","",0,null],[11,"content_length","","",0,null],[11,"content_type","","",0,null],[11,"content_type_metadata","","",0,null],[11,"content_type_all","","",0,null],[11,"host","","",0,null],[11,"handler","","",0,null],[11,"method","","",0,null],[11,"password","","",0,null],[11,"path","","",0,null],[11,"payload","","",0,null],[11,"query","","",0,null],[11,"urldecode","","",0,null],[11,"scheme","","",0,null],[11,"set_scheme","","",0,null],[11,"set_remote_addr","","",0,null],[11,"remote_addr","","",0,null],[11,"request_line","","",0,null],[11,"uri","","",0,null],[11,"user_agent","","",0,null],[11,"user_name","","",0,null],[11,"version","","",0,null],[11,"header","","",0,null],[11,"headers","","",0,null],[11,"fmt","","",0,null],[11,"multipart_boundary","","",0,null],[11,"body","","",0,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"new","","",1,{"inputs":[],"output":{"name":"response"}}],[11,"with_body","","",1,null],[11,"with_header","","",1,null],[11,"with_status","","",1,null],[11,"status_code","","",1,null],[11,"content_length","","",1,null],[11,"header","","",1,null],[0,"buffer","tokio_http2::http","",null,null],[3,"Buffer","tokio_http2::http::buffer","",null,null],[17,"MAX_BUFFER_SIZE","","",null,null],[11,"fmt","","",24,null],[11,"default","","",24,{"inputs":[],"output":{"name":"buffer"}}],[11,"clone","","",24,null],[11,"new","","",24,{"inputs":[],"output":{"name":"buffer"}}],[11,"reset","","",24,null],[11,"len","","",24,null],[11,"is_max_size","","",24,null],[11,"is_empty","","",24,null],[11,"bytes","","",24,null],[11,"consume","","",24,null],[11,"consume_leading_lines","","",24,null],[11,"read_from","","",24,null],[11,"write_into","","",24,null],[11,"write","","",24,null],[11,"default","tokio_http2::http","",23,{"inputs":[],"output":{"name":"httpproto"}}],[11,"bind_transport","","",23,null],[11,"decode","","HttpCodec::decode can be modified to fit whatever is needed.",25,null],[11,"encode","","",25,null],[0,"version","tokio_http2","HTTP Versions enum",null,null],[4,"HttpVersion","tokio_http2::version","Represents a version of the HTTP spec.",null,null],[13,"Http09","","`HTTP/0.9`",26,null],[13,"Http10","","`HTTP/1.0`",26,null],[13,"Http11","","`HTTP/1.1`",26,null],[13,"H2","","`HTTP/2.0` over TLS",26,null],[13,"H2c","","`HTTP/2.0` over cleartext",26,null],[11,"eq","","",26,null],[11,"partial_cmp","","",26,null],[11,"clone","","",26,null],[11,"cmp","","",26,null],[11,"hash","","",26,null],[11,"fmt","","",26,null],[11,"fmt","","",26,null],[11,"default","","",26,{"inputs":[],"output":{"name":"httpversion"}}],[0,"error","tokio_http2","Error and Result module.",null,null],[4,"ParseError","tokio_http2::error","Errors that can occur during parsing.",null,null],[13,"EmptyHost","","",27,null],[13,"IdnaError","","",27,null],[13,"InvalidPort","","",27,null],[13,"InvalidIpv4Address","","",27,null],[13,"InvalidIpv6Address","","",27,null],[13,"InvalidDomainCharacter","","",27,null],[13,"RelativeUrlWithoutBase","","",27,null],[13,"RelativeUrlWithCannotBeABaseBase","","",27,null],[13,"SetHostOnCannotBeABaseUrl","","",27,null],[13,"Overflow","","",27,null],[4,"Error","","A set of errors that can occur parsing HTTP streams.",null,null],[13,"Method","","An invalid `Method`, such as `GE,T`.",28,null],[13,"Uri","","An invalid `RequestUri`, such as `exam ple.domain`.",28,null],[13,"Version","","An invalid `HttpVersion`, such as `HTP/1.1`",28,null],[13,"Header","","An invalid `Header`.",28,null],[13,"TooLarge","","A message head is too large to be reasonable.",28,null],[13,"Incomplete","","A message reached EOF, but is not complete.",28,null],[13,"Status","","An invalid `Status`, such as `1337 ELITE`.",28,null],[13,"Timeout","","A timeout occurred waiting for an IO event.",28,null],[13,"Io","","An `io::Error` that occurred while trying to read or write to a network stream.",28,null],[13,"Utf8","","An error from a SSL library.\nParsing a field as string failed",28,null],[6,"Result","","Result type often returned from methods that can have hyper `Error`s.",null,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"description","","",28,null],[11,"cause","","",28,null],[11,"from","","",28,{"inputs":[{"name":"ioerror"}],"output":{"name":"error"}}],[11,"from","","",28,{"inputs":[{"name":"parseerror"}],"output":{"name":"error"}}],[11,"from","","",28,{"inputs":[{"name":"utf8error"}],"output":{"name":"error"}}],[11,"from","","",28,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"error"}}],[11,"from","","",28,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[0,"status","tokio_http2","HTTP status codes",null,null],[4,"StatusCode","tokio_http2::status","An HTTP status code (`status-code` in RFC 7230 et al.).",null,null],[13,"Continue","","100 Continue\n[[RFC7231, Section 6.2.1](https://tools.ietf.org/html/rfc7231#section-6.2.1)]",29,null],[13,"SwitchingProtocols","","101 Switching Protocols\n[[RFC7231, Section 6.2.2](https://tools.ietf.org/html/rfc7231#section-6.2.2)]",29,null],[13,"Processing","","102 Processing\n[[RFC2518](https://tools.ietf.org/html/rfc2518)]",29,null],[13,"Ok","","200 OK\n[[RFC7231, Section 6.3.1](https://tools.ietf.org/html/rfc7231#section-6.3.1)]",29,null],[13,"Created","","201 Created\n[[RFC7231, Section 6.3.2](https://tools.ietf.org/html/rfc7231#section-6.3.2)]",29,null],[13,"Accepted","","202 Accepted\n[[RFC7231, Section 6.3.3](https://tools.ietf.org/html/rfc7231#section-6.3.3)]",29,null],[13,"NonAuthoritativeInformation","","203 Non-Authoritative Information\n[[RFC7231, Section 6.3.4](https://tools.ietf.org/html/rfc7231#section-6.3.4)]",29,null],[13,"NoContent","","204 No Content\n[[RFC7231, Section 6.3.5](https://tools.ietf.org/html/rfc7231#section-6.3.5)]",29,null],[13,"ResetContent","","205 Reset Content\n[[RFC7231, Section 6.3.6](https://tools.ietf.org/html/rfc7231#section-6.3.6)]",29,null],[13,"PartialContent","","206 Partial Content\n[[RFC7233, Section 4.1](https://tools.ietf.org/html/rfc7233#section-4.1)]",29,null],[13,"MultiStatus","","207 Multi-Status\n[[RFC4918](https://tools.ietf.org/html/rfc4918)]",29,null],[13,"AlreadyReported","","208 Already Reported\n[[RFC5842](https://tools.ietf.org/html/rfc5842)]",29,null],[13,"ImUsed","","226 IM Used\n[[RFC3229](https://tools.ietf.org/html/rfc3229)]",29,null],[13,"MultipleChoices","","300 Multiple Choices\n[[RFC7231, Section 6.4.1](https://tools.ietf.org/html/rfc7231#section-6.4.1)]",29,null],[13,"MovedPermanently","","301 Moved Permanently\n[[RFC7231, Section 6.4.2](https://tools.ietf.org/html/rfc7231#section-6.4.2)]",29,null],[13,"Found","","302 Found\n[[RFC7231, Section 6.4.3](https://tools.ietf.org/html/rfc7231#section-6.4.3)]",29,null],[13,"SeeOther","","303 See Other\n[[RFC7231, Section 6.4.4](https://tools.ietf.org/html/rfc7231#section-6.4.4)]",29,null],[13,"NotModified","","304 Not Modified\n[[RFC7232, Section 4.1](https://tools.ietf.org/html/rfc7232#section-4.1)]",29,null],[13,"UseProxy","","305 Use Proxy\n[[RFC7231, Section 6.4.5](https://tools.ietf.org/html/rfc7231#section-6.4.5)]",29,null],[13,"TemporaryRedirect","","307 Temporary Redirect\n[[RFC7231, Section 6.4.7](https://tools.ietf.org/html/rfc7231#section-6.4.7)]",29,null],[13,"PermanentRedirect","","308 Permanent Redirect\n[[RFC7238](https://tools.ietf.org/html/rfc7238)]",29,null],[13,"BadRequest","","400 Bad Request\n[[RFC7231, Section 6.5.1](https://tools.ietf.org/html/rfc7231#section-6.5.1)]",29,null],[13,"Unauthorized","","401 Unauthorized\n[[RFC7235, Section 3.1](https://tools.ietf.org/html/rfc7235#section-3.1)]",29,null],[13,"PaymentRequired","","402 Payment Required\n[[RFC7231, Section 6.5.2](https://tools.ietf.org/html/rfc7231#section-6.5.2)]",29,null],[13,"Forbidden","","403 Forbidden\n[[RFC7231, Section 6.5.3](https://tools.ietf.org/html/rfc7231#section-6.5.3)]",29,null],[13,"NotFound","","404 Not Found\n[[RFC7231, Section 6.5.4](https://tools.ietf.org/html/rfc7231#section-6.5.4)]",29,null],[13,"MethodNotAllowed","","405 Method Not Allowed\n[[RFC7231, Section 6.5.5](https://tools.ietf.org/html/rfc7231#section-6.5.5)]",29,null],[13,"NotAcceptable","","406 Not Acceptable\n[[RFC7231, Section 6.5.6](https://tools.ietf.org/html/rfc7231#section-6.5.6)]",29,null],[13,"ProxyAuthenticationRequired","","407 Proxy Authentication Required\n[[RFC7235, Section 3.2](https://tools.ietf.org/html/rfc7235#section-3.2)]",29,null],[13,"RequestTimeout","","408 Request Timeout\n[[RFC7231, Section 6.5.7](https://tools.ietf.org/html/rfc7231#section-6.5.7)]",29,null],[13,"Conflict","","409 Conflict\n[[RFC7231, Section 6.5.8](https://tools.ietf.org/html/rfc7231#section-6.5.8)]",29,null],[13,"Gone","","410 Gone\n[[RFC7231, Section 6.5.9](https://tools.ietf.org/html/rfc7231#section-6.5.9)]",29,null],[13,"LengthRequired","","411 Length Required\n[[RFC7231, Section 6.5.10](https://tools.ietf.org/html/rfc7231#section-6.5.10)]",29,null],[13,"PreconditionFailed","","412 Precondition Failed\n[[RFC7232, Section 4.2](https://tools.ietf.org/html/rfc7232#section-4.2)]",29,null],[13,"PayloadTooLarge","","413 Payload Too Large\n[[RFC7231, Section 6.5.11](https://tools.ietf.org/html/rfc7231#section-6.5.11)]",29,null],[13,"UriTooLong","","414 URI Too Long\n[[RFC7231, Section 6.5.12](https://tools.ietf.org/html/rfc7231#section-6.5.12)]",29,null],[13,"UnsupportedMediaType","","415 Unsupported Media Type\n[[RFC7231, Section 6.5.13](https://tools.ietf.org/html/rfc7231#section-6.5.13)]",29,null],[13,"RangeNotSatisfiable","","416 Range Not Satisfiable\n[[RFC7233, Section 4.4](https://tools.ietf.org/html/rfc7233#section-4.4)]",29,null],[13,"ExpectationFailed","","417 Expectation Failed\n[[RFC7231, Section 6.5.14](https://tools.ietf.org/html/rfc7231#section-6.5.14)]",29,null],[13,"ImATeapot","","418 I&#39;m a teapot\n[curiously, not registered by IANA, but [RFC2324](https://tools.ietf.org/html/rfc2324)]",29,null],[13,"MisdirectedRequest","","421 Misdirected Request\n[RFC7540, Section 9.1.2](http://tools.ietf.org/html/rfc7540#section-9.1.2)",29,null],[13,"UnprocessableEntity","","422 Unprocessable Entity\n[[RFC4918](https://tools.ietf.org/html/rfc4918)]",29,null],[13,"Locked","","423 Locked\n[[RFC4918](https://tools.ietf.org/html/rfc4918)]",29,null],[13,"FailedDependency","","424 Failed Dependency\n[[RFC4918](https://tools.ietf.org/html/rfc4918)]",29,null],[13,"UpgradeRequired","","426 Upgrade Required\n[[RFC7231, Section 6.5.15](https://tools.ietf.org/html/rfc7231#section-6.5.15)]",29,null],[13,"PreconditionRequired","","428 Precondition Required\n[[RFC6585](https://tools.ietf.org/html/rfc6585)]",29,null],[13,"TooManyRequests","","429 Too Many Requests\n[[RFC6585](https://tools.ietf.org/html/rfc6585)]",29,null],[13,"RequestHeaderFieldsTooLarge","","431 Request Header Fields Too Large\n[[RFC6585](https://tools.ietf.org/html/rfc6585)]",29,null],[13,"UnavailableForLegalReasons","","451 Unavailable For Legal Reasons\n[[RFC7725](http://tools.ietf.org/html/rfc7725)]",29,null],[13,"InternalServerError","","500 Internal Server Error\n[[RFC7231, Section 6.6.1](https://tools.ietf.org/html/rfc7231#section-6.6.1)]",29,null],[13,"NotImplemented","","501 Not Implemented\n[[RFC7231, Section 6.6.2](https://tools.ietf.org/html/rfc7231#section-6.6.2)]",29,null],[13,"BadGateway","","502 Bad Gateway\n[[RFC7231, Section 6.6.3](https://tools.ietf.org/html/rfc7231#section-6.6.3)]",29,null],[13,"ServiceUnavailable","","503 Service Unavailable\n[[RFC7231, Section 6.6.4](https://tools.ietf.org/html/rfc7231#section-6.6.4)]",29,null],[13,"GatewayTimeout","","504 Gateway Timeout\n[[RFC7231, Section 6.6.5](https://tools.ietf.org/html/rfc7231#section-6.6.5)]",29,null],[13,"HttpVersionNotSupported","","505 HTTP Version Not Supported\n[[RFC7231, Section 6.6.6](https://tools.ietf.org/html/rfc7231#section-6.6.6)]",29,null],[13,"VariantAlsoNegotiates","","506 Variant Also Negotiates\n[[RFC2295](https://tools.ietf.org/html/rfc2295)]",29,null],[13,"InsufficientStorage","","507 Insufficient Storage\n[[RFC4918](https://tools.ietf.org/html/rfc4918)]",29,null],[13,"LoopDetected","","508 Loop Detected\n[[RFC5842](https://tools.ietf.org/html/rfc5842)]",29,null],[13,"NotExtended","","510 Not Extended\n[[RFC2774](https://tools.ietf.org/html/rfc2774)]",29,null],[13,"NetworkAuthenticationRequired","","511 Network Authentication Required\n[[RFC6585](https://tools.ietf.org/html/rfc6585)]",29,null],[13,"Unregistered","","A status code not in the IANA HTTP status code registry or very well known",29,null],[4,"StatusClass","","The class of an HTTP `status-code`.",null,null],[13,"Informational","","1xx (Informational): The request was received, continuing process",30,null],[13,"Success","","2xx (Success): The request was successfully received, understood, and accepted",30,null],[13,"Redirection","","3xx (Redirection): Further action needs to be taken in order to complete the request",30,null],[13,"ClientError","","4xx (Client Error): The request contains bad syntax or cannot be fulfilled",30,null],[13,"ServerError","","5xx (Server Error): The server failed to fulfill an apparently valid request",30,null],[13,"NoClass","","A status code lower than 100 or higher than 599. These codes do no belong to any class.",30,null],[11,"fmt","","",29,null],[11,"hash","","",29,null],[11,"canonical_reason","","Get the standardised `reason-phrase` for this status code.",29,null],[11,"class","","Determine the class of a status code, based on its first digit.",29,null],[11,"is_informational","","Check if class is Informational.",29,null],[11,"is_success","","Check if class is Success.",29,null],[11,"is_redirection","","Check if class is Redirection.",29,null],[11,"is_client_error","","Check if class is ClientError.",29,null],[11,"is_server_error","","Check if class is ServerError.",29,null],[11,"is_strange_status","","Check if class is NoClass",29,null],[11,"fmt","","",29,null],[11,"eq","","",29,null],[11,"clone","","",29,null],[11,"partial_cmp","","",29,null],[11,"cmp","","",29,null],[11,"default","","",29,{"inputs":[],"output":{"name":"statuscode"}}],[11,"fmt","","",30,null],[11,"clone","","",30,null],[11,"eq","","",30,null],[11,"partial_cmp","","",30,null],[11,"cmp","","",30,null],[11,"default_code","","Get the default status code for the class.",30,null],[0,"method","tokio_http2","",null,null],[4,"Method","tokio_http2::method","The Request Method (VERB)",null,null],[13,"Options","","OPTIONS",31,null],[13,"Get","","GET",31,null],[13,"Post","","POST",31,null],[13,"Put","","PUT",31,null],[13,"Delete","","DELETE",31,null],[13,"Head","","HEAD",31,null],[13,"Trace","","TRACE",31,null],[13,"Connect","","CONNECT",31,null],[13,"Patch","","PATCH",31,null],[13,"Extension","","Method extensions. An example would be `let m = Extension(&quot;FOO&quot;.to_string())`.",31,null],[11,"clone","","",31,null],[11,"eq","","",31,null],[11,"ne","","",31,null],[11,"hash","","",31,null],[11,"fmt","","",31,null],[11,"as_ref","","",31,null],[11,"safe","","Whether a method is considered &quot;safe&quot;, meaning the request is\nessentially read-only.",31,null],[11,"idempotent","","Whether a method is considered &quot;idempotent&quot;, meaning the request has\nthe same result if executed multiple times.",31,null],[11,"from_str","","",31,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",31,null],[11,"default","","",31,{"inputs":[],"output":{"name":"method"}}],[0,"router","tokio_http2","",null,null],[3,"Router","tokio_http2::router","This is the one. The router.",null,null],[12,"routes","","",32,null],[0,"path","","",null,null],[3,"RequestPath","tokio_http2::router::path","Represents a path in HTTP sense (starting from `/`)",null,null],[12,"matcher","","",33,null],[11,"fmt","","",33,null],[11,"clone","","",33,null],[11,"new","","Creates a new path.",33,{"inputs":[{"name":"str"}],"output":{"name":"requestpath"}}],[0,"route","tokio_http2::router","",null,null],[0,"route","tokio_http2::router::route","",null,null],[3,"Route","tokio_http2::router::route::route","Holds route information",null,null],[12,"method","","HTTP method to match",34,null],[12,"path","","RequestPath to match",34,null],[12,"handler","","Request handler",34,null],[11,"clone","","",34,null],[11,"options","","",34,{"inputs":[{"name":"str"}],"output":{"name":"routebuilder"}}],[11,"get","","",34,{"inputs":[{"name":"str"}],"output":{"name":"routebuilder"}}],[11,"post","","",34,{"inputs":[{"name":"str"}],"output":{"name":"routebuilder"}}],[11,"put","","",34,{"inputs":[{"name":"str"}],"output":{"name":"routebuilder"}}],[11,"delete","","",34,{"inputs":[{"name":"str"}],"output":{"name":"routebuilder"}}],[11,"head","","",34,{"inputs":[{"name":"str"}],"output":{"name":"routebuilder"}}],[11,"trace","","",34,{"inputs":[{"name":"str"}],"output":{"name":"routebuilder"}}],[11,"connect","","",34,{"inputs":[{"name":"str"}],"output":{"name":"routebuilder"}}],[11,"patch","","",34,{"inputs":[{"name":"str"}],"output":{"name":"routebuilder"}}],[11,"from","","",34,{"inputs":[{"name":"method"},{"name":"str"}],"output":{"name":"routebuilder"}}],[11,"default","","",34,{"inputs":[],"output":{"name":"route"}}],[11,"fmt","","",34,null],[0,"builder","tokio_http2::router::route","",null,null],[3,"RouteBuilder","tokio_http2::router::route::builder","",null,null],[11,"new","","",35,{"inputs":[{"name":"route"}],"output":{"name":"routebuilder"}}],[11,"using","","Completes the building process by taking the handler to process the request.",35,null],[0,"builder","tokio_http2::router","",null,null],[3,"RouterBuilder","tokio_http2::router::builder","Builder for a router",null,null],[11,"fmt","","",36,null],[11,"new","","",36,{"inputs":[],"output":{"name":"routerbuilder"}}],[11,"add","","Adds new `Route` for `Router` that is being built.",36,null],[11,"build","","",36,null],[0,"handlers","tokio_http2::router","",null,null],[5,"default_404_handler","tokio_http2::router::handlers","Default handlers",null,{"inputs":[{"name":"request"}],"output":{"name":"response"}}],[5,"method_not_supported_handler","","",null,{"inputs":[{"name":"request"}],"output":{"name":"response"}}],[5,"internal_server_error_handler","","",null,{"inputs":[{"name":"request"}],"output":{"name":"response"}}],[5,"not_implemented_handler","","",null,{"inputs":[{"name":"request"}],"output":{"name":"response"}}],[6,"HttpResult","tokio_http2::router","",null,null],[11,"fmt","","",32,null],[11,"clone","","",32,null],[11,"new","","Create a default Router.",32,{"inputs":[],"output":{"name":"router"}}],[11,"find_handler_with_defaults","","Finds handler for given Request.",32,null],[11,"find_handler","","Finds handler for given Request.",32,null],[11,"find_handler_with_method_and_path","","Finds handler for given &amp;str path.",32,null],[11,"find_for_method","","",32,null],[0,"logger","tokio_http2","Logger",null,null],[3,"Logger","tokio_http2::logger","",null,null],[12,"logger","","",37,null],[4,"LoggerLevel","","",null,null],[13,"Debug","","",38,null],[13,"Error","","",38,null],[13,"Info","","",38,null],[13,"Warn","","",38,null],[11,"fmt","","",37,null],[11,"clone","","",37,null],[11,"new","","",37,{"inputs":[{"name":"option"}],"output":{"name":"logger"}}],[11,"write","","",37,null],[6,"Body","tokio_http2","",null,null],[6,"ContentType","","",null,null],[6,"ContentLength","","",null,null],[6,"Headers","","",null,null],[6,"Handler","","",null,null],[11,"parse","","Parse an absolute URL from a string.",39,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"join","","Parse a string as an URL, with this URL as the base URL.",39,null],[11,"options","","Return a default `ParseOptions` that can fully configure the URL parser.",39,{"inputs":[],"output":{"name":"parseoptions"}}],[11,"as_str","","Return the serialization of this URL.",39,null],[11,"into_string","","Return the serialization of this URL.",39,null],[11,"origin","","Return the origin of this URL (https://url.spec.whatwg.org/#origin)",39,null],[11,"scheme","","Return the scheme of this URL, lower-cased, as an ASCII string without the &#39;:&#39; delimiter.",39,null],[11,"has_authority","","Return whether the URL has an &#39;authority&#39;,\nwhich can contain a username, password, host, and port number.",39,null],[11,"cannot_be_a_base","","Return whether this URL is a cannot-be-a-base URL,\nmeaning that parsing a relative URL string with this URL as the base will return an error.",39,null],[11,"username","","Return the username for this URL (typically the empty string)\nas a percent-encoded ASCII string.",39,null],[11,"password","","Return the password for this URL, if any, as a percent-encoded ASCII string.",39,null],[11,"has_host","","Equivalent to `url.host().is_some()`.",39,null],[11,"host_str","","Return the string representation of the host (domain or IP address) for this URL, if any.",39,null],[11,"host","","Return the parsed representation of the host for this URL.\nNon-ASCII domain labels are punycode-encoded per IDNA.",39,null],[11,"domain","","If this URL has a host and it is a domain name (not an IP address), return it.",39,null],[11,"port","","Return the port number for this URL, if any.",39,null],[11,"port_or_known_default","","Return the port number for this URL, or the default port number if it is known.",39,null],[11,"with_default_port","","If the URL has a host, return something that implements `ToSocketAddrs`.",39,null],[11,"path","","Return the path for this URL, as a percent-encoded ASCII string.\nFor cannot-be-a-base URLs, this is an arbitrary string that doesn’t start with &#39;/&#39;.\nFor other URLs, this starts with a &#39;/&#39; slash\nand continues with slash-separated path segments.",39,null],[11,"path_segments","","Unless this URL is cannot-be-a-base,\nreturn an iterator of &#39;/&#39; slash-separated path segments,\neach as a percent-encoded ASCII string.",39,null],[11,"query","","Return this URL’s query string, if any, as a percent-encoded ASCII string.",39,null],[11,"query_pairs","","Parse the URL’s query string, if any, as `application/x-www-form-urlencoded`\nand return an iterator of (key, value) pairs.",39,null],[11,"fragment","","Return this URL’s fragment identifier, if any.",39,null],[11,"set_fragment","","Change this URL’s fragment identifier.",39,null],[11,"set_query","","Change this URL’s query string.",39,null],[11,"query_pairs_mut","","Manipulate this URL’s query string, viewed as a sequence of name/value pairs\nin `application/x-www-form-urlencoded` syntax.",39,null],[11,"set_path","","Change this URL’s path.",39,null],[11,"path_segments_mut","","Return an object with methods to manipulate this URL’s path segments.",39,null],[11,"set_port","","Change this URL’s port number.",39,null],[11,"set_host","","Change this URL’s host.",39,null],[11,"set_ip_host","","Change this URL’s host to the given IP address.",39,null],[11,"set_password","","Change this URL’s password.",39,null],[11,"set_username","","Change this URL’s username.",39,null],[11,"set_scheme","","Change this URL’s scheme.",39,null],[11,"from_file_path","","Convert a file name as `std::path::Path` into an URL in the `file` scheme.",39,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"from_directory_path","","Convert a directory name as `std::path::Path` into an URL in the `file` scheme.",39,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar,\nconvert its path to an absolute `std::path::Path`.",39,null],[11,"into_url","","",39,null],[11,"cmp","","",39,null],[11,"description","tokio_http2::error","",27,null],[11,"as_ref","tokio_http2","",39,null],[11,"eq","","",39,null],[11,"eq","tokio_http2::error","",27,null],[11,"hash","tokio_http2","",39,null],[11,"to_socket_addrs","","",39,null],[11,"fmt","","",39,null],[11,"fmt","tokio_http2::error","",27,null],[11,"index","tokio_http2","",39,null],[11,"index","","",39,null],[11,"index","","",39,null],[11,"index","","",39,null],[11,"clone","tokio_http2::error","",27,null],[11,"clone","tokio_http2","",39,null],[11,"fmt","tokio_http2::error","",27,null],[11,"fmt","tokio_http2","",39,null],[11,"from","tokio_http2::error","",27,{"inputs":[{"name":"errors"}],"output":{"name":"parseerror"}}],[11,"from_str","tokio_http2","",39,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"partial_cmp","","",39,null]],"paths":[[3,"Request"],[3,"Response"],[3,"StreamIdentifier"],[3,"ErrorCode"],[3,"SizeIncrement"],[4,"Error"],[4,"HttpError"],[4,"Kind"],[3,"Flag"],[4,"Payload"],[4,"SettingIdentifier"],[3,"Priority"],[3,"Setting"],[3,"Frame"],[3,"FrameHeader"],[3,"ParserSettings"],[3,"Encoder"],[4,"IntegerDecodingError"],[4,"StringDecodingError"],[4,"DecoderError"],[3,"Decoder"],[4,"HuffmanDecoderError"],[3,"HuffmanDecoder"],[3,"HttpProto"],[3,"Buffer"],[3,"HttpCodec"],[4,"HttpVersion"],[4,"ParseError"],[4,"Error"],[4,"StatusCode"],[4,"StatusClass"],[4,"Method"],[3,"Router"],[3,"RequestPath"],[3,"Route"],[3,"RouteBuilder"],[3,"RouterBuilder"],[3,"Logger"],[4,"LoggerLevel"],[3,"Url"]]};
initSearch(searchIndex);
